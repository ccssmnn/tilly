/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as RemindersRouteImport } from './routes/reminders'
import { Route as AssistantRouteImport } from './routes/assistant'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PeopleIndexRouteImport } from './routes/people.index'
import { Route as PeoplePersonIDRouteImport } from './routes/people.$personID'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const RemindersRoute = RemindersRouteImport.update({
  id: '/reminders',
  path: '/reminders',
  getParentRoute: () => rootRouteImport,
} as any)
const AssistantRoute = AssistantRouteImport.update({
  id: '/assistant',
  path: '/assistant',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PeopleIndexRoute = PeopleIndexRouteImport.update({
  id: '/people/',
  path: '/people/',
  getParentRoute: () => rootRouteImport,
} as any)
const PeoplePersonIDRoute = PeoplePersonIDRouteImport.update({
  id: '/people/$personID',
  path: '/people/$personID',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/reminders': typeof RemindersRoute
  '/settings': typeof SettingsRoute
  '/people/$personID': typeof PeoplePersonIDRoute
  '/people': typeof PeopleIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/reminders': typeof RemindersRoute
  '/settings': typeof SettingsRoute
  '/people/$personID': typeof PeoplePersonIDRoute
  '/people': typeof PeopleIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/assistant': typeof AssistantRoute
  '/reminders': typeof RemindersRoute
  '/settings': typeof SettingsRoute
  '/people/$personID': typeof PeoplePersonIDRoute
  '/people/': typeof PeopleIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/assistant'
    | '/reminders'
    | '/settings'
    | '/people/$personID'
    | '/people'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/assistant'
    | '/reminders'
    | '/settings'
    | '/people/$personID'
    | '/people'
  id:
    | '__root__'
    | '/'
    | '/assistant'
    | '/reminders'
    | '/settings'
    | '/people/$personID'
    | '/people/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AssistantRoute: typeof AssistantRoute
  RemindersRoute: typeof RemindersRoute
  SettingsRoute: typeof SettingsRoute
  PeoplePersonIDRoute: typeof PeoplePersonIDRoute
  PeopleIndexRoute: typeof PeopleIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reminders': {
      id: '/reminders'
      path: '/reminders'
      fullPath: '/reminders'
      preLoaderRoute: typeof RemindersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/assistant': {
      id: '/assistant'
      path: '/assistant'
      fullPath: '/assistant'
      preLoaderRoute: typeof AssistantRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/people/': {
      id: '/people/'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/people/$personID': {
      id: '/people/$personID'
      path: '/people/$personID'
      fullPath: '/people/$personID'
      preLoaderRoute: typeof PeoplePersonIDRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AssistantRoute: AssistantRoute,
  RemindersRoute: RemindersRoute,
  SettingsRoute: SettingsRoute,
  PeoplePersonIDRoute: PeoplePersonIDRoute,
  PeopleIndexRoute: PeopleIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
