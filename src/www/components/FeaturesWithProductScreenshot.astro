---
import { Badge } from "#shared/ui/badge"
import { TypographyH2, TypographyLead, TypographyP } from "#shared/ui/typography"

export interface Props {
	badge?: string
	title: string
	subtitle?: string
	features: Array<{
		name: string
		description: string
	}>
	closing?: string
	screenshot: {
		src: string
		alt: string
	}
	video?: {
		src: string
	}
}

const { badge, title, subtitle, features, closing, screenshot, video } = Astro.props
---

<div class="bg-background">
	<div class="container mx-auto px-6 md:px-8">
		<div class="mx-auto grid max-w-2xl grid-cols-1 gap-x-8 gap-y-16 md:mx-0 md:max-w-none md:grid-cols-2">
			<div class="md:pt-4 md:pr-8">
				<div class="md:max-w-lg">
					{badge && (
						<Badge variant="outline" className="mb-4">
							{badge}
						</Badge>
					)}
					<TypographyH2>
						{title}
					</TypographyH2>
					{subtitle && (
						<TypographyLead className="mt-6">
							{subtitle}
						</TypographyLead>
					)}
					<ul class="mt-10 max-w-xl space-y-8 list-none">
						{features.map((feature) => (
							<li>
								<span class="font-semibold">
									{feature.name}
								</span>
								<span class="text-muted-foreground">{feature.description}</span>
							</li>
						))}
					</ul>
					{closing && (
						<TypographyP>
							{closing}
						</TypographyP>
					)}
				</div>
			</div>
			<div class="flex items-center justify-center">
				{video ? (
					<div class="relative">
						<img
							id="screenshot-fallback"
							alt={screenshot.alt}
							src={screenshot.src}
							class="max-w-full max-h-[60vh] w-auto rounded-xl shadow-xl ring-1 ring-border object-contain"
						/>
						<video
							id="demo-video"
							class="max-w-full max-h-[60vh] w-auto rounded-xl shadow-xl ring-1 ring-border object-contain absolute inset-0 opacity-0 transition-opacity duration-500"
							muted
							loop
							playsinline
							preload="metadata"
						>
							<source src={video.src} type="video/mp4" />
						</video>
					</div>
				) : (
					<img
						alt={screenshot.alt}
						src={screenshot.src}
						class="max-w-full max-h-[60vh] w-auto rounded-xl shadow-xl ring-1 ring-border object-contain"
					/>
				)}
			</div>

			{video && (
				<script>
					const video = document.getElementById('demo-video') as HTMLVideoElement
					const fallback = document.getElementById('screenshot-fallback') as HTMLImageElement
					
					if (video && fallback) {
						const observer = new IntersectionObserver((entries) => {
							entries.forEach(entry => {
								if (entry.isIntersecting) {
									video.addEventListener('canplaythrough', () => {
										video.style.opacity = '1'
										fallback.style.opacity = '0'
										video.play()
									})
									video.load()
									observer.unobserve(entry.target)
								}
							})
						}, { threshold: 0.5 })
						
						observer.observe(video)
					}
				</script>
			)}
		</div>
	</div>
</div>
